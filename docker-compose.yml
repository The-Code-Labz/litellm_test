services:
  litellm:
    build:
      context: .
      args:
        target: runtime
    image: ghcr.io/berriai/litellm:main-stable
    container_name: litellm
    networks:
      - dokploy-network
      - backend
    #########################################
    ## Uncomment these lines to start proxy with a config.yaml file ##
    volumes:
      - ./config.yaml:/app/config.yaml 
    command:
      - "--config=/app/config.yaml"
    ##############################################
 #   ports:
 #     - "4000:4000" # Map the container port to the host, change the host port if necessary
    environment:
        DATABASE_URL: "postgresql://litellm:${POSTGRES_PASSWORD}@172.55.55.50:5432/postgres?schema=litellm_schema"
        STORE_MODEL_IN_DB: "True" # allows adding models to proxy via UI
    env_file:
      - .env # Load local .env file
    healthcheck:  # Defines the health check configuration for the container
      test: [ "CMD", "curl", "-f", "http://localhost:4000/health/liveliness || exit 1" ]  # Command to execute for health check
      interval: 30s  # Perform health check every 30 seconds
      timeout: 10s   # Health check command times out after 10 seconds
      retries: 3     # Retry up to 3 times if health check fails
      start_period: 40s  # Wait 40 seconds after container start before beginning health checks
    labels: # (optional only for using traefik) ------>
      - "traefik.enable=true"
      - "traefik.http.routers.litellm.entrypoints=websecure"
      - "traefik.http.routers.litellm.rule=Host(`litellm.backend.neurolearninglabs.com`)" # Replace with your desired hostname
      - "traefik.http.routers.litellm.tls=true"
      - "traefik.http.routers.litellm.tls.certresolver=cloudflare" # Replace with your cert resolver name
      - "traefik.http.services.litellm.loadbalancer.server.port=4000"    
      - "traefik.docker.network=dokploy-network" # Use the same network as Traefik
      - "traefik.http.routers.litellm.service=litellm"        
####################################################################################################################################################################
 # db:
 #   image: postgres:16
 #   restart: always
 #   container_name: litellm-db
 #   environment:
 #     POSTGRES_DB: litellm
 #     POSTGRES_USER: llmproxy
 #     POSTGRES_PASSWORD: dbpassword9090
 #   networks:
 #     - backend      
 #   volumes:
 #     - postgres_data:/var/lib/postgresql/data  # Persists Postgres data across container restarts
 #   healthcheck:
 #     test: ["CMD-SHELL", "pg_isready -d litellm -U llmproxy"]
 #     interval: 1s
 #     timeout: 5s
 #     retries: 10
#####################################################################################################  
  prometheus:
    image: prom/prometheus
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
    restart: always

volumes:
  prometheus_data:
    driver: local
networks:
  dokploy-network:
    external: true 
  backend:
    external: true
